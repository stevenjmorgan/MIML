install.packages("missForest")
if (!require("missForest")) install.packages("pacman")
load('cleanedANES.RData')
setwd("/Users/Charlotte/Documents/GitHub/MIML/ANES")
load('cleanedANES.RData')
View(anes)
if (!require("missForest")) install.packages("missForest")
rm(list=ls())
if (!require("missForest")) install.packages("missForest")
load('cleanedANES.RData')
#### Imputation ####
ANES.mF <- missForest(anes)
warnings()
summary(anes)
View(anes)
table(anes$vote.dem)
table(anes$dem)
table(anes$gop)
table(anes$ideo)
table(anes$bible)
# Use lapply() to coerce and replace the chosen columns:
anes[cols] <- lapply(anes[cols], factor)
cols <- c("vote.dem", "dem", "gop", "ideo", "bible", "inform", "edu", "income", "female", "black", "hisp", "white")
anes[cols] <- lapply(anes[cols], factor)
summary(anes)
table(anes$ideo)
load('cleanedANES.RData')
# specify variable type
cols <- c("vote.dem", "dem", "gop", "ideo", "bible", "inform", "edu", "income", "female", "black", "hisp", "white")
# Use lapply() to coerce and replace the chosen columns:
anes[cols] <- lapply(anes[cols], factor)
summary(anes)
# specify variable type
anes$ideo <- as.numeric(anes$ideo)
cols <- c("vote.dem", "dem", "gop", "ideo", "bible", "inform", "edu", "income", "female", "black", "hisp", "white")
# Use lapply() to coerce and replace the chosen columns:
anes[cols] <- lapply(anes[cols], factor)
if (!require("missForest")) install.packages("missForest")
load('cleanedANES.RData')
# specify variable type
anes$ideo <- as.numeric(anes$ideo)
cols <- c("vote.dem", "dem", "gop", "ideo", "bible", "inform", "edu", "income", "female", "black", "hisp", "white")
# Use lapply() to coerce and replace the chosen columns:
anes[cols] <- lapply(anes[cols], factor)
summary(anes)
table(anes$ideo)
load('cleanedANES.RData')
# specify variable type
anes$ideo <- as.numeric(anes$ideo)
cols <- c("vote.dem", "dem", "gop", "bible", "inform", "edu", "income", "female", "black", "hisp", "white")
anes[cols] <- lapply(anes[cols], factor)
summary(anes)
#### Imputation ####
ANES.mF <- missForest(anes)
ANES.mF
ANES.mF2 <- missForest(anes, variablewise = TRUE)
ANES.mF2 <- missForest(anes, variablewise = TRUE)
ANES.mF2
View(anes)
mixError(ANES.mF[[1]], anes, ANES.mF2[[1]])
mixError(ANES.mF$ximp, anes, ANES.mF2$ximp)
load("anesMissing.RData")
load("anesMCAR.RData")
View(full.na.mcar)
View(amp.mcar)
View(amp.mar)
View(amp.mnar)
View(amp.mcar)
View(full.na.mcar)
summary(full.na.mcar)
View(amp.mnar)
amp.mcar[cols] <- lapply(amp.mcar[cols], factor)
amp.mar[cols] <- lapply(amp.mar[cols], factor)
amp.mnar[cols] <- lapply(amp.mnar[cols], factor)
View(amp.mnar)
View(amp.mcar)
summary(amp.mcar)
load("anesMissing.RData")
rm(list=ls())
if (!require("missForest")) install.packages("missForest")
load('cleanedANES.RData')
load("anesMissing.RData")
View(amp.mcar)
cols <- c("vote.dem", "dem", "gop", "bible", "inform", "edu", "income", "female", "black", "hisp", "white")
# Use lapply() to coerce and replace the chosen columns to factors:
anes[cols] <- lapply(anes[cols], factor)
amp.mcar[cols] <- lapply(amp.mcar[cols], factor)
amp.mar[cols] <- lapply(amp.mar[cols], factor)
amp.mnar[cols] <- lapply(amp.mnar[cols], factor)
summary(anes)
summary(amp.mcar)
summary(amp.mar)
dim(anes)
anes.complete <- anes[complete.cases(anes),]
dim(anes.complete) #deletes 1889 rows
#### Imputation anes with missForest ####
ANES.mF <- missForest(anes)
ANES.mF
#### Imputation anes with missForest ####
ANES.mF <- missForest(anes, maxiter = 30) # results give OOBerror (NRMSE for continuous variables & proportion of falsely clarified entries for categorical variables)
ANES.mF
# impute simulated data; compare against the complete dataset
out.mar <- missForest(amp.mar, xtrue = anes.complete)
out.mnar <- missForest(amp.mnar, xtrue = anes.complete)
out.mcar <- missForest(amp.mcar, xtrue = anes.complete)
out.mar
out.mnar
out.mcar
logit_form <- as.formula(vote.dem ~ dem + gop + ideo + HRC.FT + DJT.FT + bible + inform + edu + income + female + black + hisp)
logit_full <- glm(logit_form, data = anes.complete, family=binomial(link='logit'))
logit_mar <- glm(logit_form, data = out.mar, family=binomial(link='logit'))
logit_mnar <- glm(logit_form, data = out.mnar, family=binomial(link='logit'))
logit_mcar <- glm(logit_form, data = out.mcar, family=binomial(link='logit'))
logit_mar <- glm(logit_form, data = out.mar$ximp, family=binomial(link='logit'))
logit_mnar <- glm(logit_form, data = out.mnar$ximp, family=binomial(link='logit'))
logit_mcar <- glm(logit_form, data = out.mcar$ximp, family=binomial(link='logit'))
ols_form <- as.formula(DJT.FT ~ dem + gop + ideo + bible + inform + edu + edu + income + female + black + hisp)
ols_full <- lm(ols_form, data = anes.complete)
ols_mar <- lm(ols_form, data = out.mar$ximp)
ols_mnar <- lm(ols_form, data = out.mnar$ximp)
ols_mcar <- lm(ols_form, data = out.mcar$ximp)
logit_cleaned <- glm(logit_form, data = ANES.mF$ximp, family=binomial(link='logit'))
ols_cleaned <- lm(ols_form, data = ANES.mF$ximp)
logit_raw <- glm(logit_form, data = ANES.mF$ximp, family=binomial(link='logit'))
ols_raw <- lm(ols_form, data = ANES.mF$ximp)
## Logit:
# Coefficients
logit_bind_coeff <- cbind(as.numeric(logit_raw$coefficients),
as.numeric(logit_full$coefficients),
as.numeric(logit_mar$coefficients),
as.numeric(logit_mnar$coefficients),
as.numeric(logit_mcar$coefficients))
colnames(logit_bind_coeff) <- c("raw", "full", "mar", "mnar", "mcar")
# P-value? Not sure if this is necessary? for coefficients or model?
# Model fit
logit_mod_f <- as.data.frame(c(logit_raw$aic,
logit_full$aic,
logit_mar$aic,
logit_mnar$aic,
logit_mcar$aic))
colnames(logit_mod_f) <- c("raw", "full", "mar", "mnar", "mcar")
## OLS:
# Coefficients
ols_bind_coeff <- cbind(as.numeric(ols_raw$coefficients),
as.numeric(ols_full$coefficients),
as.numeric(ols_mar$coefficients),
as.numeric(ols_mnar$coefficients),
as.numeric(ols_mcar$coefficients))
colnames(ols_bind_coeff) <- c("raw", "full", "mar", "mnar", "mcar")
# P-value? Not sure if this is necessary? for coefficients or model?
# Model fit
ols_mod_f <- as.data.frame(c(ols_raw$aic,
ols_full$aic,
ols_mar$aic,
ols_mnar$aic,
ols_mcar$aic))
colnames(ols_mod_f) <- c("raw", "full", "mar", "mnar", "mcar")
ols_bind_coeff
View(ols_bind_coeff)
View(logit_bind_coeff)
rownames(ols_bind_coeff) <- colnames(anes)
logit_raw$coefficients
names(logit_raw$coefficients)
rownames(ols_bind_coeff) <- colnames(ols_raw$coefficients)
View(ols_bind_coeff)
ols_bind_coeff$variable <- colnames(ols_raw$coefficients)
colnames(ols_raw$coefficients)
ols_bind_coeff <- cbind(as.numeric(ols_raw$coefficients),
as.numeric(ols_full$coefficients),
as.numeric(ols_mar$coefficients),
as.numeric(ols_mnar$coefficients),
as.numeric(ols_mcar$coefficients))
colnames(ols_bind_coeff) <- c("raw", "full", "mar", "mnar", "mcar")
ols_bind_coeff$variable <- names(logit_raw$coefficients)
ols_bind_coeff <- cbind(as.numeric(ols_raw$coefficients),
as.numeric(ols_full$coefficients),
as.numeric(ols_mar$coefficients),
as.numeric(ols_mnar$coefficients),
as.numeric(ols_mcar$coefficients))
colnames(ols_bind_coeff) <- c("raw", "full", "mar", "mnar", "mcar")
ols_bind_coeff$variable <- t(names(logit_raw$coefficients))
names(logit_raw$coefficients)
names(logit_raw$coefficients)[-1]
ols_bind_coeff <- cbind(as.numeric(ols_raw$coefficients),
as.numeric(ols_full$coefficients),
as.numeric(ols_mar$coefficients),
as.numeric(ols_mnar$coefficients),
as.numeric(ols_mcar$coefficients))
colnames(ols_bind_coeff) <- c("raw", "full", "mar", "mnar", "mcar")
ols_bind_coeff$variable <- names(ols_raw$coefficients)[-1]
ols_raw$coefficients
names(ols_raw$coefficients)
ols_bind_coeff <- cbind(as.numeric(ols_raw$coefficients),
as.numeric(ols_full$coefficients),
as.numeric(ols_mar$coefficients),
as.numeric(ols_mnar$coefficients),
as.numeric(ols_mcar$coefficients))
colnames(ols_bind_coeff) <- c("raw", "full", "mar", "mnar", "mcar")
ols_bind_coeff$variable <- names(ols_raw$coefficients)
ols_bind_coeff <- cbind(as.numeric(ols_raw$coefficients),
as.numeric(ols_full$coefficients),
as.numeric(ols_mar$coefficients),
as.numeric(ols_mnar$coefficients),
as.numeric(ols_mcar$coefficients))
colnames(ols_bind_coeff) <- c("raw", "full", "mar", "mnar", "mcar")
names(ols_raw$coefficients)
View(ols_bind_coeff)
logit_mod_f <- as.data.frame(c(logit_raw$aic,
logit_full$aic,
logit_mar$aic,
logit_mnar$aic,
logit_mcar$aic))
colnames(logit_mod_f) <- c("raw", "full", "mar", "mnar", "mcar")
View(logit_bind_coeff)
ols_bind_coeff <- cbind(as.numeric(ols_raw$coefficients),
as.numeric(ols_full$coefficients),
as.numeric(ols_mar$coefficients),
as.numeric(ols_mnar$coefficients),
as.numeric(ols_mcar$coefficients))
colnames(ols_bind_coeff) <- c("raw", "full", "mar", "mnar", "mcar")
ols_bind_coeff$variable <- names(ols_raw$coefficients)
ols_bind_coeff <- cbind(as.numeric(ols_raw$coefficients),
as.numeric(ols_full$coefficients),
as.numeric(ols_mar$coefficients),
as.numeric(ols_mnar$coefficients),
as.numeric(ols_mcar$coefficients))
colnames(ols_bind_coeff) <- c("raw", "full", "mar", "mnar", "mcar")
ols_raw$coefficients
n(ols_raw$coefficients)
length(ols_raw$coefficients)
## Logit:
# Coefficients
logit_bind_coeff <- cbind(as.numeric(logit_raw$coefficients),
as.numeric(logit_full$coefficients),
as.numeric(logit_mar$coefficients),
as.numeric(logit_mnar$coefficients),
as.numeric(logit_mcar$coefficients))
colnames(logit_bind_coeff) <- c("raw", "full", "mar", "mnar", "mcar")
logit_mod_f <- as.data.frame(c(logit_raw$aic,
logit_full$aic,
logit_mar$aic,
logit_mnar$aic,
logit_mcar$aic))
colnames(logit_mod_f) <- c("raw", "full", "mar", "mnar", "mcar")
View(logit_mod_f)
logit_mod_f <- as.data.frame(c(logit_raw$aic,
logit_full$aic,
logit_mar$aic,
logit_mnar$aic,
logit_mcar$aic))
logit_raw$aic
c(logit_raw$aic,
logit_full$aic,
logit_mar$aic,
logit_mnar$aic,
logit_mcar$aic)
View(logit_mod_f)
t(c(logit_raw$aic,
logit_full$aic,
logit_mar$aic,
logit_mnar$aic,
logit_mcar$aic))
colnames(logit_mod_f) <- c("raw", "full", "mar", "mnar", "mcar")
logit_mod_f <- as.data.frame(t(c(logit_raw$aic,
logit_full$aic,
logit_mar$aic,
logit_mnar$aic,
logit_mcar$aic)))
View(logit_mod_f)
colnames(logit_mod_f) <- c("raw", "full", "mar", "mnar", "mcar")
# Model fit
ols_mod_f <- as.data.frame(t(c(ols_raw$aic,
ols_full$aic,
ols_mar$aic,
ols_mnar$aic,
ols_mcar$aic)))
colnames(ols_mod_f) <- c("raw", "full", "mar", "mnar", "mcar")
ols_bind_coeff <- cbind(as.numeric(ols_raw$coefficients),
as.numeric(ols_full$coefficients),
as.numeric(ols_mar$coefficients),
as.numeric(ols_mnar$coefficients),
as.numeric(ols_mcar$coefficients))
colnames(ols_bind_coeff) <- c("raw", "full", "mar", "mnar", "mcar")
ols_raw$aic
ols_full
logit_raw
coef(summary(logit_raw))
# P-value? Not sure if this is necessary? for coefficients or model?
coef(summary(logit_raw))[5]
# P-value? Not sure if this is necessary? for coefficients or model?
coef(summary(logit_raw))[,4]
summary(ols_raw)
rm(list=ls())
setwd('/Users/Charlotte/Documents/GitHub/MIML/Simulation')
if (!require("missForest")) install.packages("missForest")
load('mcar1_singledf.RData')
setwd("/Users/Charlotte/Documents/GitHub/MIML/ANES")
if (!require("missForest")) install.packages("missForest")
load("cleanedANES.RData")
View(anes)
load("cleanedANES.RData")
load("anesMissing.RData")
cols <- c("vote.dem", "dem", "gop", "ideo", "bible", "inform", "edu", "income", "female", "black", "hisp", "white")
anes[cols] <- lapply(anes[cols], factor)
amp.mar[cols] <- lapply(amp.mar[cols], factor)
amp.mnar[cols] <- lapply(amp.mnar[cols], factor)
amp.mcar[cols] <- lapply(amp.mcar[cols], factor)
summary(anes)
summary(amp.mar)
summary(amp.mnar)
summary(amp.mcar)
# Listwise deletion for "natural" missingness in anes
dim(anes)
anes.complete <- anes[complete.cases(anes),]
dim(anes.complete) #deletes 1889 rows
#### Imputation with missForest ####
# impute data w/ natural missingness
ANES.mF <- missForest(anes, maxiter = 30) # gives OOBerror (NRMSE for continuous variables & proportion of falsely clarified entries for categorical variables)
if (!require("missForest")) install.packages("missForest")
# Listwise deletion for "natural" missingness in anes
dim(anes)
anes.complete <- anes[complete.cases(anes),]
dim(anes.complete) #deletes 1889 rows
#### Imputation with missForest ####
# impute data w/ natural missingness
ANES.mF <- missForest(anes, maxiter = 30) # gives OOBerror (NRMSE for continuous variables & proportion of falsely clarified entries for categorical variables)
ANES.mF
logit_form <- as.formula(vote.dem ~ dem + gop + ideo + HRC.FT + DJT.FT + bible + inform + edu + income + female + black + hisp)
logit_raw <- glm(logit_form, data = ANES.mF$ximp, family=binomial(link='logit'))
vote.dem.noFT <- glm(vote.dem ~ dem + gop + ideo + bible + inform + edu +
income + female + black + hisp, data = ANES.mF$ximp, family = 'binomial')
summary(vote.dem.noFT)
vote.dem.noFT
vote.dem.noFT$df.residual
vote.dem.noFT$df.null
vote.dem.noFT$residuals
View(vote.dem.noFT)
summary(vote.dem.noFT)
vote.dem.noFT$coefficients
View(anes.complete)
load("cleanedANES.RData")
load("anesMissing.RData")
# specify variable type
cols <- c("vote.dem", "dem", "gop", "female", "black", "hisp", "white")
# "ideo", "bible", "inform", "edu", "income", ordinal or continuous?
# Use lapply() to coerce and replace the chosen columns to factors:
anes[cols] <- lapply(anes[cols], factor)
amp.mar[cols] <- lapply(amp.mar[cols], factor)
amp.mnar[cols] <- lapply(amp.mnar[cols], factor)
amp.mcar[cols] <- lapply(amp.mcar[cols], factor)
summary(anes)
summary(amp.mar)
summary(amp.mnar)
summary(amp.mcar)
dim(anes)
anes.complete <- anes[complete.cases(anes),]
dim(anes.complete) #deletes 1889 rows
#### Imputation with missForest ####
# impute data w/ natural missingness
ANES.mF <- missForest(anes, maxiter = 30) # gives OOBerror (NRMSE for continuous variables & proportion of falsely clarified entries for categorical variables)
warnings()
vote.dem.noFT <- glm(vote.dem ~ dem + gop + ideo + bible + inform + edu +
income + female + black + hisp, data = ANES.mF$ximp, family = 'binomial')
summary(vote.dem.noFT)
ANES.mF
anes[cols2] <- lapply(anes[cols2], ordered)
col2 <- c("ideo", "bible", "inform", "edu", "income") # ordinal or continuous?
anes[cols2] <- lapply(anes[cols2], ordered)
cols2 <- c("ideo", "bible", "inform", "edu", "income") # ordinal or continuous?
anes[cols2] <- lapply(anes[cols2], ordered)
summary(anes)
load("cleanedANES.RData")
load("anesMissing.RData")
# specify variable type
cols <- c("vote.dem", "dem", "gop", "female", "black", "hisp", "white")
cols2 <- c("ideo", "bible", "inform", "edu", "income") # ordinal or continuous?
# Use lapply() to coerce and replace the chosen columns to factors:
anes[cols] <- lapply(anes[cols], factor)
anes[cols2] <- lapply(anes[cols2], ordered)
summary(anes)
#### Imputation with missForest ####
# impute data w/ natural missingness
ANES.mF <- missForest(anes, maxiter = 30) # gives OOBerror (NRMSE for continuous variables & proportion of falsely clarified entries for categorical variables)
View(anes)
# Model vote choice w/o feeling thermometers (reduce collinearity w/ ideology)
vote.dem.noFT <- glm(vote.dem ~ dem + gop + ideo + bible + inform + edu +
income + female + black + hisp, data = ANES.mF$ximp, family = 'binomial')
summary(vote.dem.noFT)
library(mice)
library(xtable)
load("cleanedANES.RData")
names(anes)
#transfer type of binary & categorical data into factor (from numeric)
for(i in c(1:4, 7:14)){
anes[,i]<-as.factor(anes[,i])
}
str(anes)
load("tempData_imp_mice_anes.RData")
# Model vote choice w/o feeling thermometers (reduce collinearity w/ ideology)
vote.dem.noFT <- with(tempData, glm(vote.dem ~ dem + gop + as.numeric(ideo) + as.numeric(bible) + as.numeric(inform) + as.numeric(edu) +  as.numeric(income) + female + black + hisp, family = 'binomial'))
model1<-round(summary(pool(vote.dem.noFT)),4)
mean(c(vote.dem.noFT$analyses[[1]]$deviance, vote.dem.noFT$analyses[[2]]$deviance, vote.dem.noFT$analyses[[3]]$deviance, vote.dem.noFT$analyses[[4]]$deviance, vote.dem.noFT$analyses[[5]]$deviance))
# Model feeling thermometer for Trump (0-100 treated as continuous)
trump.FT <-with(tempData, lm(DJT.FT ~ dem + gop + as.numeric(ideo) + as.numeric(bible) + as.numeric(inform) + as.numeric(edu) +  as.numeric(income) + female + black + hisp))
model2<-round(summary(pool(trump.FT)),4)
pool.r.squared(trump.FT)
pool.r.squared(trump.FT, adjusted=TRUE)
xtable(model1)
xtable(model2)
summary(tempData)
ANES.mF
logit_form <- as.formula(vote.dem ~ dem + gop + as.numeric(ideo) + as.numeric(bible) + as.numeric(inform) + as.numeric(edu) + as.numeric(income) + female + black + hisp, data = ANES.mF$ximp, family = 'binomial')
logit_raw <- glm(logit_form, data = ANES.mF$ximp, family=binomial(link='logit'))
summary(logit_raw)
ANES.mF$ximp <- lapply(ANES.mF$ximp[cols2], as.numeric)
logit_form <- as.formula(vote.dem ~ dem + gop + ideo + bible + inform + edu +
income + female + black + hisp)
logit_raw <- glm(logit_form, data = ANES.mF$ximp, family=binomial(link='logit'))
ANES.mF <- missForest(anes, maxiter = 30) # gives OOBerror (NRMSE for continuous variables & proportion of falsely clarified entries for categorical variables)
ANES.mF$ximp[cols2] <- lapply(ANES.mF$ximp[cols2], as.numeric)
logit_form <- as.formula(vote.dem ~ dem + gop + ideo + bible + inform + edu +
income + female + black + hisp)
logit_raw <- glm(logit_form, data = ANES.mF$ximp, family=binomial(link='logit'))
logit_raw
summary(logit_raw)
logit_raw$aic
View(logit_raw)
logit_raw$rank
logLik(logit_raw)
if (!require("stargazer")) install.packages("stargazer")
library(stargazer)
## Logit:
# Coefficients
stargazer(logit_raw, title="Results", align=TRUE)
ols_form <- as.formula(DJT.FT ~ dem + gop + ideo + bible + inform + edu + edu + income + female + black + hisp)
ols_raw <- lm(ols_form, data = ANES.mF$ximp)
## OLS:
# Coefficients
stargazer(ols_raw, align = TRUE)
ANES.mF
logit_raw
ols_raw
summary(ols_raw)
if (!require("missForest")) install.packages("missForest")
if (!require("stargazer")) install.packages("stargazer")
load("cleanedANES.RData")
load("anesMissing.RData")
# specify variable type
cols1 <- c("vote.dem", "dem", "gop", "female", "black", "hisp", "white") # categorical
cols2 <- c("ideo", "bible", "inform", "edu", "income") # ordinal
# Use lapply() to coerce and replace the chosen columns to factors:
anes[cols1] <- lapply(anes[cols1], factor)
anes[cols2] <- lapply(anes[cols2], ordered)
summary(anes)
#### Imputation with missForest ####
# impute data w/ natural missingness
ANES.mF <- missForest(anes, maxiter = 30) # gives OOBerror (NRMSE for continuous variables & proportion of falsely clarified entries for categorical variables)
ANES.mF$ximp[cols2] <- lapply(ANES.mF$ximp[cols2], as.numeric)
logit_form <- as.formula(vote.dem ~ dem + gop + ideo + bible + inform + edu +
income + female + black + hisp)
logit_mF <- glm(logit_form, data = ANES.mF$ximp, family=binomial(link='logit'))
View(logit_mF)
summary(logit_mF)
ols_form <- as.formula(DJT.FT ~ dem + gop + ideo + bible + inform + edu + edu + income + female + black + hisp)
ols_mF <- lm(ols_form, data = ANES.mF$ximp)
logit.noFT_mF <- glm(logit_form, data = ANES.mF$ximp, family=binomial(link='logit'))
logit_form <- as.formula(vote.dem ~ dem + gop + ideo + HRC.FT + DJT.FT + bible + inform + edu + income + female + black + hisp)
logit.FT_mF <- glm(logit_form, data = ANES.mF$ximp, family=binomial(link='logit'))
save(logit.FT_mF, logit.noFT_mF, ols_mf, file = "ANES_missForest.RData")
ols_form <- as.formula(DJT.FT ~ dem + gop + ideo + bible + inform + edu + edu + income + female + black + hisp)
ols_mF <- lm(ols_form, data = ANES.mF$ximp)
save(logit.FT_mF, logit.noFT_mF, ols_mf, file = "ANES_missForest.RData")
save(logit.FT_mF, logit.noFT_mF, ols_mf, file = "ANES_missForest.RData")
save(logit.FT_mF, logit.noFT_mF, ols_mF, file = "ANES_missForest.RData")
