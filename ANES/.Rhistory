library(ggplot2)
df_melt <- melt(df_after1850, id.vars = "year", measure.vars = c("p_1883", "p_1910", "p_1950"))
library(dplyr)
df_melt <- melt(df_after1850, id.vars = "year", measure.vars = c("p_1883", "p_1910", "p_1950"))
tc <- read.table("googlebooks-eng-all-totalcounts-20120701.txt")
t <- strsplit(as.matrix(t(tc)), ",")
year <- c()
match_count <- c()
for(i in 1:length(t)) {
year[i] <- t[[i]][1]
match_count[i] <- t[[i]][2]
}
year <- as.numeric(year)
match_count <- as.numeric(match_count)
mtx <- cbind(year, match_count)
df <- as.data.frame(mtx, colnames = c("year", "match_count")) # data frame for total counts
#### 2. Appending Data Associated w/ Words ####
library(dplyr)
yc <- as.data.frame(read.csv("yearcount.csv"))
word_1883 <- yc[yc$ngram == 1883,]
word_1910 <- yc[yc$ngram == 1910,]
word_1950 <- yc[yc$ngram == 1950,]
a <- left_join(df,word_1883, by = c("year","year"))
b <- left_join(a, word_1910, by = c("year", "year"))
df_all <- left_join(b, word_1950, by = c("year", "year"))
drops <- c("ngram.x", "ngram.y", "ngram", "volume_count.x","volume_count.y", "volume_count")
df_cleaned <- df_all[, !names(df_all) %in% drops]
colnames(df_cleaned) <- c("year", "match_count", "mc_1883", "mc_1910" , "mc_1950")
df_cleaned[is.na(df_cleaned)] <- 0
# calculate proportions
df_cleaned$p_1883 <- df_cleaned$mc_1883 / df_cleaned$match_count
df_cleaned$p_1910 <- df_cleaned$mc_1910 / df_cleaned$match_count
df_cleaned$p_1950 <- df_cleaned$mc_1950 / df_cleaned$match_count
df_after1850 <- df_cleaned[df_cleaned$year >= 1850,]
#### 3. Plotting ####
library(ggplot2)
library(reshape)
df_melt <- melt(df_after1850, id.vars = "year", measure.vars = c("p_1883", "p_1910", "p_1950"))
plot1 <- ggplot(df_melt, aes(x = year, y = value))
plot1 + geom_line(aes(colour = factor(variable, labels = c("1883", "1910", "1950"))))
tc <- read.table("googlebooks-eng-all-totalcounts-20120701.txt")
t <- strsplit(as.matrix(t(tc)), ",")
year <- c()
match_count <- c()
for(i in 1:length(t)) {
year[i] <- t[[i]][1]
match_count[i] <- t[[i]][2]
}
year <- as.numeric(year)
match_count <- as.numeric(match_count)
mtx <- cbind(year, match_count)
df <- as.data.frame(mtx, colnames = c("year", "match_count")) # data frame for total counts
library(dplyr)
yc <- as.data.frame(read.csv("yearcount.csv"))
word_1883 <- yc[yc$ngram == 1883,]
word_1910 <- yc[yc$ngram == 1910,]
word_1950 <- yc[yc$ngram == 1950,]
a <- left_join(df,word_1883, by = c("year","year"))
b <- left_join(a, word_1910, by = c("year", "year"))
df_all <- left_join(b, word_1950, by = c("year", "year"))
drops <- c("ngram.x", "ngram.y", "ngram", "volume_count.x","volume_count.y", "volume_count")
df_cleaned <- df_all[, !names(df_all) %in% drops]
colnames(df_cleaned) <- c("year", "match_count", "mc_1883", "mc_1910" , "mc_1950")
df_cleaned[is.na(df_cleaned)] <- 0
df_cleaned$p_1883 <- df_cleaned$mc_1883 / df_cleaned$match_count
df_cleaned$p_1910 <- df_cleaned$mc_1910 / df_cleaned$match_count
df_cleaned$p_1950 <- df_cleaned$mc_1950 / df_cleaned$match_count
df_after1850 <- df_cleaned[df_cleaned$year >= 1850,]
library(ggplot2)
library(reshape)
install.packages("reshape")
library(reshape)
df_melt <- melt(df_after1850, id.vars = "year", measure.vars = c("p_1883", "p_1910", "p_1950"))
plot1 <- ggplot(df_melt, aes(x = year, y = value))
plot1 + geom_line(aes(colour = factor(variable, labels = c("1883", "1910", "1950"))))
View(df_melt)
View(df_cleaned)
df_melt_raw <- melt(df_after1850, id.vars = "year", measure.vars = c("mc_1883", "mc_1910", "mc_1950"))
View(df_melt_raw)
df_melt_raw <- melt(df_after1850, id.vars = "year", measure.vars = c("mc_1883", "mc_1910", "mc_1950"))
plot2 <- ggplot(df_melt_raw, aes(x = year, y = value))
plot1 + geom_line(aes(colour = factor(variable, labels = c("1883", "1910", "1950"))))
plot2 + geom_line(aes(colour = factor(variable, labels = c("1883", "1910", "1950"))))
View(df)
View(yc)
x <- seq(1875, 1975, 1)
x <- seq(1875, 1975, 1)
y <- runif(0,100,101)
y <- runif(101,0,101)
ya <- as.data.frame(c(x,y))
ya <- as.data.frame(x,y)
ya <- cbind(x, y)
View(ya)
x <- seq(1875, 1975, 1)
y <- runif(101,0,101)
ya <- as.dataframe(cbind(x, y))
ya <- as.data.frame(cbind(x, y))
View(ya)
for(i in ya)
print(ya$x)
for(i in ya)
print(ya$x[i])
for(i in ya)
print(ya[i]$x)
for(i in ya)
for(i in ya)
print(ya$x)
print(ya$y)
for(i in ya$y)
print(ya$x)
print(ya$y)
for(i in ya$y)
print(ya$x[i])
print(ya$y)
for(i in ya$y)
print(ya$x[i])
print(ya$y[i])
for(i in ya$y){
print(ya$x[i])
print(ya$y[i])
}
for(i in ya$y){
#    print(ya$x[i])
print(ya$y[i])
}
for(i in ya){
#    print(ya$x[i])
print(ya$y[i])
}
for(i in ya){
#    print(ya$x[i])
print(ya$y)
}
for(i in ya){
#    print(ya$x[i])
print(ya$y)
}
tc <- read.table("googlebooks-eng-all-totalcounts-20120701.txt")
View(tc)
t <- strsplit(as.matrix(t(tc)), ",")
as.matrix(t(tc)), ","
as.matrix(t(tc))
year <- c()
match_count <- c()
for(i in 1:length(t)) {
year[i] <- t[[i]][1]
match_count[i] <- t[[i]][2]
}
year <- as.numeric(year)
match_count <- as.numeric(match_count)
mtx <- cbind(year, match_count)
View(tc)
View(mtx)
df <- as.data.frame(mtx, colnames = c("year", "match_count")) # data frame for total counts
yc <- as.data.frame(read.csv("yearcount.csv"))
word_1883 <- yc[yc$ngram == 1883,]
word_1910 <- yc[yc$ngram == 1910,]
word_1950 <- yc[yc$ngram == 1950,]
a <- left_join(df,word_1883, by = c("year","year"))
b <- left_join(a, word_1910, by = c("year", "year"))
df_all <- left_join(b, word_1950, by = c("year", "year"))
drops <- c("ngram.x", "ngram.y", "ngram", "volume_count.x","volume_count.y", "volume_count")
df_cleaned <- df_all[, !names(df_all) %in% drops]
df_all <- left_join(b, word_1950, by = c("year", "year"))
View(df_all)
drops <- c("ngram.x", "ngram.y", "ngram", "volume_count.x","volume_count.y", "volume_count")
df_cleaned <- df_all[, !names(df_all) %in% drops]
View(df_cleaned)
colnames(df_cleaned) <- c("year", "match_count", "mc_1883", "mc_1910" , "mc_1950")
df_cleaned[is.na(df_cleaned)] <- 0
df_cleaned$p_1883 <- df_cleaned$mc_1883 / df_cleaned$match_count
df_cleaned$p_1910 <- df_cleaned$mc_1910 / df_cleaned$match_count
df_cleaned$p_1950 <- df_cleaned$mc_1950 / df_cleaned$match_count
df_after1850 <- df_cleaned[df_cleaned$year >= 1850,]
View(df_after1850)
df_melt <- melt(df_after1850, id.vars = "year", measure.vars = c("p_1883", "p_1910", "p_1950"))
View(df_melt)
x <- c(1875, 1876, 1877, 1878, 1879)
x <- c(1875, 1876, 1877, 1878, 1879)
y <- c(50, 48, 47, 25, 20)
ya <- as.data.frame(cbind(x, y))
for(i in ya){
#    print(ya$x[i])
print(ya$y)
}
for(i in ya){
#    print(ya$x[i])
print(ya$x)
}
for(i in ya){
#    print(ya$x[i])
print(ya)
}
for(i,j in ya){
#    print(ya$x[i])
print(ya)
}
for(i in ya){
#    print(ya$x[i])
print(ya$y)
}
for(i in ya){
#    print(ya$x[i])
print('booyah')
}
x <- c(1875, 1876, 1877, 1878, 1879)
y <- c(50, 48, 47, 25, 20)
ya <- as.data.frame(cbind(x, y))
for(i in ya){
#    print(ya$x[i])
print('booyah')
}
View(ya)
for(j in ya){
#    print(ya$x[i])
print('booyah')
}
for(i in nrow(ya)){
#    print(ya$x[i])
print('booyah')
}
nrow(ya)
for(i in 1:nrow(ya)){
#    print(ya$x[i])
print('booyah')
}
for(i in 1:nrow(ya)){
#    print(ya$x[i])
print(ya$y)
}
for(i in 1:nrow(ya)){
#    print(ya$x[i])
print(ya$y[i])
}
#################################
#                               #
#         Assignment 2.6        #
#                               #
#################################
#### 1. Total Counts ####
# read in total counts
tc <- read.table("googlebooks-eng-all-totalcounts-20120701.txt")
t <- strsplit(as.matrix(t(tc)), ",")
year <- c()
match_count <- c()
for(i in 1:length(t)) {
year[i] <- t[[i]][1]
match_count[i] <- t[[i]][2]
}
year <- as.numeric(year)
match_count <- as.numeric(match_count)
mtx <- cbind(year, match_count)
df <- as.data.frame(mtx, colnames = c("year", "match_count")) # data frame for total counts
#### 2. Appending Data Associated w/ Words ####
library(dplyr)
yc <- as.data.frame(read.csv("yearcount.csv"))
word_1883 <- yc[yc$ngram == 1883,]
word_1910 <- yc[yc$ngram == 1910,]
word_1950 <- yc[yc$ngram == 1950,]
a <- left_join(df,word_1883, by = c("year","year"))
b <- left_join(a, word_1910, by = c("year", "year"))
df_all <- left_join(b, word_1950, by = c("year", "year"))
drops <- c("ngram.x", "ngram.y", "ngram", "volume_count.x","volume_count.y", "volume_count")
df_cleaned <- df_all[, !names(df_all) %in% drops]
colnames(df_cleaned) <- c("year", "match_count", "mc_1883", "mc_1910" , "mc_1950")
df_cleaned[is.na(df_cleaned)] <- 0
# calculate proportions
df_cleaned$p_1883 <- df_cleaned$mc_1883 / df_cleaned$match_count
df_cleaned$p_1910 <- df_cleaned$mc_1910 / df_cleaned$match_count
df_cleaned$p_1950 <- df_cleaned$mc_1950 / df_cleaned$match_count
df_after1850 <- df_cleaned[df_cleaned$year >= 1850,]
#### 3. Plotting ####
library(ggplot2)
install.packages("reshape")
library(reshape)
df_melt <- melt(df_after1850, id.vars = "year", measure.vars = c("p_1883", "p_1910", "p_1950"))
plot1 <- ggplot(df_melt, aes(x = year, y = value))
plot1 + geom_line(aes(colour = factor(variable, labels = c("1883", "1910", "1950"))))
df_melt_raw <- melt(df_after1850, id.vars = "year", measure.vars = c("mc_1883", "mc_1910", "mc_1950"))
plot2 <- ggplot(df_melt_raw, aes(x = year, y = value))
plot2 + geom_line(aes(colour = factor(variable, labels = c("1883", "1910", "1950"))))
install.packages("reshape")
View(df_melt_raw)
View(df_after1850)
View(df)
tc <- read.table("googlebooks-eng-all-totalcounts-20120701.txt")
t <- strsplit(as.matrix(t(tc)), ",")
year <- c()
match_count <- c()
for(i in 1:length(t)) {
year[i] <- t[[i]][1]
match_count[i] <- t[[i]][2]
}
year <- as.numeric(year)
match_count <- as.numeric(match_count)
mtx <- cbind(year, match_count)
df <- as.data.frame(mtx, colnames = c("year", "match_count")) # data frame for total counts
library(dplyr)
yc <- as.data.frame(read.csv("yearcount.csv"))
word_1883 <- yc[yc$ngram == 1883,]
word_1910 <- yc[yc$ngram == 1910,]
word_1950 <- yc[yc$ngram == 1950,]
a <- left_join(df,word_1883, by = c("year","year"))
b <- left_join(a, word_1910, by = c("year", "year"))
df_all <- left_join(b, word_1950, by = c("year", "year"))
drops <- c("ngram.x", "ngram.y", "ngram", "volume_count.x","volume_count.y", "volume_count")
df_cleaned <- df_all[, !names(df_all) %in% drops]
colnames(df_cleaned) <- c("year", "match_count", "mc_1883", "mc_1910" , "mc_1950")
df_cleaned[is.na(df_cleaned)] <- 0
df_cleaned$p_1883 <- df_cleaned$mc_1883 / df_cleaned$match_count
df_cleaned$p_1910 <- df_cleaned$mc_1910 / df_cleaned$match_count
df_cleaned$p_1950 <- df_cleaned$mc_1950 / df_cleaned$match_count
df_after1850 <- df_cleaned[df_cleaned$year >= 1850,]
library(ggplot2)
library(reshape)
df_melt1 <- melt(df_after1850, id.vars = "year", measure.vars = c("p_1883", "p_1910", "p_1950"))
plot1 <- ggplot(df_melt1, aes(x = year, y = value))
plot1 + geom_line(aes(colour = variable))
?geom_line
plot1 + geom_line(aes(colour = c('red','blue','green')))
plot1 <- ggplot(df_melt1, aes(x = year, y = value))
plot1 + geom_line(aes(colour = variable))
df_melt1 <- melt(df_after1850, id.vars = "year", measure.vars = c("p_1950", "p_1910", "p_1883"))
plot1 <- ggplot(df_melt1, aes(x = year, y = value))
plot1 + geom_line(aes(colour = variable))
plot1 <- ggplot(df_melt1, aes(x = year, y = value))
plot1 + geom_line(aes(colour = variable))
plot1 + geom_line(aes(colour = variable)) + labs(scale_color_manual(labels = c("1950", "1910", "1883"), values = c("blue", "red", "green")))
plot1 + geom_line(aes(colour = variable) + labs(scale_color_manual(labels = c("1950", "1910", "1883"), values = c("blue", "red", "green"))))
plot1 + geom_line(aes(colour = variable) + labs(scale_color_manual(labels = c("1950", "1910", "1883"), values = c("blue", "red", "green"))))
plot1 + geom_line(aes(colour = variable)) + labs(scale_color_manual(labels = c("1950", "1910", "1883"), values = c("blue", "red", "green")))
plot1 + geom_line(aes(colour = variable)) + scale_color_manual(labels = c("1950", "1910", "1883"), values = c("blue", "red", "green"))
plot1 + geom_line(aes(colour = variable)) + scale_color_manual(labels = c("1950", "1910", "1883"), values = c("red", "green", "blue"))
df_melt1 <- melt(df_after1850, id.vars = "year", measure.vars = c("p_1883", "p_1910", "p_1950"))
plot1 <- ggplot(df_melt1, aes(x = year, y = value))
plot1 + geom_line(aes(colour = variable)) + scale_color_manual(labels = c("1950", "1910", "1883"), values = c("red", "green", "blue"))
plot1 + geom_line(aes(colour = variable)) + scale_color_manual(labels = c("1883", "1910", "1950"), values = c("red", "green", "blue"))
plot1 + geom_line(aes(colour = variable)) + scale_color_manual(labels = c("1883", "1910", "1950"), values = c("blue", "green", "red"))
df_melt2 <- melt(df_after1850, id.vars = "year", measure.vars = c("mc_1883", "mc_1910", "mc_1950"))
plot2 <- ggplot(df_melt2, aes(x = year, y = value))
plot2 + geom_line(aes(colour = variable))
plot2 + geom_line(aes(colour = variable) + scale_color_manual(labels = c("1883", "1910", "1950"), values = c("blue", "green", "red")))
df_melt2 <- melt(df_after1850, id.vars = "year", measure.vars = c("mc_1883", "mc_1910", "mc_1950"))
plot2 <- ggplot(df_melt2, aes(x = year, y = value))
plot2 + geom_line(aes(colour = variable) + scale_color_manual(labels = c("1883", "1910", "1950"), values = c("blue", "green", "red")))
plot2 + geom_line(aes(colour = variable)) + scale_color_manual(labels = c("1883", "1910", "1950"), values = c("blue", "green", "red"))
yc1975 <- as.data.frame(read.csv("yearcount1975.csv"))
yc1975 <- yc1975[, -4]
yc1975 <- as.data.frame(read.csv("yearcount1975.csv"))
yc1975 <- yc1975[, -4]
words <- 1875:1975
half_life <- c()
for(x in words) {
after.x <- df[df$year >= x,] # only consider time after x
word.x <- yc1975[yc1975$ngram == x,] # subset time after x
joint <- left_join(after.x, word.x, by = c("year", "year"))
colnames(joint) <- c("year", "match_count", "ngram", "mc.x")
joint <- joint[!(is.na(joint$ngram)),] # remove rows w/ NAs
joint$p.x <- joint$mc.x / joint$match_count # calculate proportions
peak_row <- joint[which.max(joint$p.x),] # find peak
peak_year <- peak_row$year
half_peak <- peak_row$p.x / 2 # peak value / 2
joint$abs.diff <- abs(joint$p.x - half_peak) # calculate absolute difference btw the value of peak year & other years
after.peak <- joint[joint$year >= peak_year,] # subset time after peak
hl_row <- after.peak[which.min(after.peak$abs.diff),] # find min abs diff
hl_year <- hl_row$year
half_life[which(words == x)] <- hl_year - peak_year
}
hl <- as.data.frame(cbind(words, half_life))
colnames(hl) <- c("year", "half_life")
plot(x = hl$year, y = hl$half_life)
rm(list=ls())
load("Final_Total_counts_data.Rdata")
load("Final_Total_counts_data.Rdata")
View(final_total_counts_df)
tot_ngrams=final_total_counts_df
year_int=as.integer.integer64(tot_ngrams$year) #from the bit64 package
tot_ngrams$year=year_int
install.packages("bit64")
tot_ngrams=final_total_counts_df
year_int=as.integer.integer64(tot_ngrams$year) #from the bit64 package
tot_ngrams$year=year_int
library(bit64)
tot_ngrams=final_total_counts_df
year_int=as.integer.integer64(tot_ngrams$year) #from the bit64 package
tot_ngrams$year=year_int
year_int=as.integer.integer64(tot_ngrams$year) #from the bit64 package
load("Final_Total_counts_data.Rdata")
View(final_total_counts_df)
tot_ngrams=final_total_counts_df
year_int=as.integer.integer64(tot_ngrams$year) #from the bit64 package
View(tot_ngrams)
load("Final_Total_counts_data.Rdata")
View(final_total_counts_df)
tot_ngrams=final_total_counts_df
install.packages("rio")
library(rio)
rm(list=ls())
load("Final_Total_counts_data.Rdata")
View(final_total_counts_df)
tot_ngrams=final_total_counts_df
year_int=as.integer.integer64(tot_ngrams$year) #from the bit64 package
library(dplyr)
rm(list=ls())
load("Final_Total_counts_data.Rdata")
View(final_total_counts_df)
tot_ngrams=final_total_counts_df
year_int=as.integer.integer64(tot_ngrams$year) #from the bit64 package
rm(list=ls())
load("Final_Total_counts_data.Rdata")
View(final_total_counts_df)
tot_ngrams=final_total_counts_df
year_int=as.integer.integer64(tot_ngrams$V1) #from the bit64 package
tot_ngrams$year=year_int
rm(year_int)
rm(final_total_counts_df)
View(tot_ngrams)
colnames(tot_ngrams)<-c("year_1", "total_ngrams","num_pages","num_volumes","year")
hundred_years<-import("yearcount1975.csv")
colnames(hundred_years)<-c("ngram","year","ngram_count","ngram_volume")
combined_ngrams_tot=inner_join(hundred_years,tot_ngrams,by = "year")
View(combined_ngrams_tot)
proportion = with(combined_ngrams_tot,(as.numeric(ngram_count)/as.numeric(total_ngrams)))
format(proportion,scientific = F)
max(proportion)
View(proportion)
combined_ngrams_tot$prop = proportion
p_1883 = combined_ngrams_tot %>% filter(ngram == "1883")
p_1910 = combined_ngrams_tot %>% filter(ngram == "1910")
p_1950 = combined_ngrams_tot %>% filter(ngram == "1950")
p_1883 = p_1883 %>% filter(year>=1850)
p_1910 = p_1910 %>% filter(year>=1850)
p_1950 = p_1950 %>% filter(year>=1850)
peak_1883_row=which.max(p_1883$prop)
p_1883[peak_1883_row,"year"]
peak_1910_row=which.max(p_1910$prop)
p_1910[peak_1910_row,"year"]
peak_1950_row=which.max(p_1950$prop)
p_1950[peak_1950_row,"year"]
plot1<-ggplot(data = p_1883, aes(x=year,y=prop))+
geom_line(color = "blue") + xlim(1875,2000)+ xlab("Year") +ylab("Frequency") +
geom_line(data = p_1910, color = "green") +
geom_line(data = p_1950,color = "red")
save(hundred_years,tot_ngrams,combined_ngrams_tot,p_1883,p_1910,p_1950,peak_1883_row,peak_1910_row,peak_1950_row,file="Exercise1.Rdata")
plot1
peak_value=c()
for(i in 1:100){
peak_value[i]= combined_ngrams_tot %>% summarise(peak_value=max(prop))
}
t_half=c()
j=1
for(i in 1875:1975){
tplus5 = i+5
tplus25 = i+25
nplus5_row = which(combined_ngrams_tot$ngram == i &
combined_ngrams_tot$year == tplus5)
nplus25_row = which(combined_ngrams_tot$ngram == i &
combined_ngrams_tot$year == tplus25)
nplus5 = combined_ngrams_tot$prop[nplus5_row]
nplus25 = combined_ngrams_tot$prop[nplus25_row]
n_ratio = nplus25/nplus5
t_half[j] = 20/log(n_ratio,base = 0.5)
j=j+1
}
x_years =seq.int(1875,1975)
half_life_df= as.data.frame(cbind(t_half,x_years))
View(half_life_df)
save(half_life_df,file="half-life.Rdata")
three_years=half_life_df %>% filter(x_years %in% c(1883,1910,1950))
ggplot(half_life_df, aes(x=x_years,y=t_half))+geom_point(color='gray45',size=2.2) +geom_smooth(se='FALSE',color='gray45')+geom_point(data=three_years,label=t_half,aes(color=factor(t_half)),size=5)+xlab("Years") + ylab("Half-life(yrs)") +
scale_x_continuous(name="Years", limits=c(1875,1980),breaks=c(1875,1900,1925,1950,1975),labels = c("","1900","","1950","")) + scale_y_continuous(name="Half-life(yrs)", limits=c(0,40),breaks=c(0,15,30),labels = c("0","15","30"))
##Q3
tstat <- (1.51-1.61)/sqrt(((.23^2)/13)+((.19^2)/41))
##Q3
tstat <- (1.51-1.61)/sqrt(((.23^2)/13)+((.19^2)/41))
tstat
##[1] -1.421379
pnorm(abs(tstat),lower=FALSE)*2
data <- read.csv("http://www.mjnelson.org/PLSC309/aug17poll.csv")
names(data)
#[1] 1000   20
table(data$like_others)
##Q5
prop.test(table(data$like_others,data$wedding_required))
##Q6
chisq.test(table(data$wedding_required,data$nevermarried),correct=F)
##Q7
t.test(data$partyid~data$like_others)
setwd("C:/Users/Steve/Desktop/Git_Clones/MIML/ANES")
setwd("C:/Users/Steve/Desktop/Git_Clones/MIML/ANES")
rm(list=ls())
setwd("C:/Users/Steve/Desktop/Git_Clones/MIML/ANES")
library(data.table)
library(car)
anes <- fread('anes_timeseries_2016_rawdata.txt')
anes <- fread('C:/Users/Steve/Dropbox/PSU2018-2019/Fall2018/SODA502/MLMI/anes_timeseries_2016_rawdata.txt')
summary(anes$V162034a)
unique(anes$V162034a)
# Convert to categorical
anes$PID <- recode(anes$V161155, "1 = 'Democrat'; 2 = 'Republican';
3 = 'Independent'; 5 = 'Other'; 0 = 'No Party'; else = NA")
# Convert candidate FT values to NA when appropriate (negative values)
anes$HRC.FT <- ifelse(anes$V162078 < 0, NA, anes$V162078)
anes$DJT.FT <- ifelse(anes$V162079 < 0, NA, anes$V162079)
# Convert bible word of God values to NA when appropriate (ordinal)
anes$bible <- ifelse(anes$V161243 < 0, NA, anes$V161243)
# Convert level of information values to NA when appropriate (ordinal)
anes$obs.inform <- ifelse(anes$V168016 < 0, NA, anes$V168016)
# Bin education responses: 1 = Did not graduate high school, 2 = graduated high
# school, 3 = some college, 4 = graduated college, 5 = post-college education
anes$edu <- recode(anes$V161270, "2:8 = 1; 9 = 2; 10:12 = 3; 13 = 4; 14:16 = 5;
else = NA")
